/**
* This file was auto-generated by the Titanium Module SDK helper for Android
* TiDev Titanium Mobile
* Copyright TiDev, Inc. 04/07/2022-Present
* Licensed under the terms of the Apache Public License
* Please see the LICENSE included with this distribution for details.
*/
package ti.exoplayer;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollProxy;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.titanium.TiApplication;
import org.appcelerator.titanium.TiC;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.kroll.common.TiConfig;
import org.appcelerator.titanium.util.TiConvert;
import org.appcelerator.titanium.proxy.TiViewProxy;
import org.appcelerator.titanium.view.TiCompositeLayout;
import org.appcelerator.titanium.view.TiCompositeLayout.LayoutArrangement;
import org.appcelerator.titanium.view.TiUIView;

import android.app.Activity;
import android.content.res.Resources;
import android.view.LayoutInflater;
import android.view.View;

import com.google.android.exoplayer2.ExoPlayer;
import com.google.android.exoplayer2.MediaItem;
import com.google.android.exoplayer2.MediaMetadata;
import com.google.android.exoplayer2.MetadataRetriever;
import com.google.android.exoplayer2.Player;
import com.google.android.exoplayer2.source.TrackGroup;
import com.google.android.exoplayer2.source.TrackGroupArray;
import com.google.android.exoplayer2.ui.PlayerView;
import com.google.android.exoplayer2.ui.StyledPlayerView;
import com.google.common.util.concurrent.FutureCallback;
import com.google.common.util.concurrent.Futures;
import com.google.common.util.concurrent.ListenableFuture;


public class ExoPlayerView extends TiUIView implements Player.Listener {
  ExoPlayer player = null;
  String mediaUrl = "";
  private static final String LCAT = "ExoPlayerProxy";
    public ExoPlayerView(TiViewProxy proxy) {
        super(proxy);


        String pkgName = proxy.getActivity().getPackageName();
        Resources res = proxy.getActivity().getResources();

        int resId_viewHolder = res.getIdentifier("player_view", "layout", pkgName);
        LayoutInflater inflater = LayoutInflater.from(proxy.getActivity());
        StyledPlayerView viewWrapper = (StyledPlayerView) inflater.inflate(resId_viewHolder, null);
        setNativeView(viewWrapper);
        player = new ExoPlayer.Builder(TiApplication.getAppCurrentActivity()).build();
        viewWrapper.setPlayer(player);

        if (!mediaUrl.equals("")) {
            setMediaItem(mediaUrl);
        }

        player.addListener(this);
    }

    @Override
    public void onMediaMetadataChanged(MediaMetadata mediaMetadata) {
        Player.Listener.super.onMediaMetadataChanged(mediaMetadata);
        if (mediaMetadata != null) {
            KrollDict kd = new KrollDict();

            if (mediaMetadata.artist != null) kd.put("album", mediaMetadata.artist);
            if (mediaMetadata.title != null) kd.put("title", mediaMetadata.title);
            if (mediaMetadata.albumTitle != null)
                kd.put("albumTitle", mediaMetadata.albumTitle);
            if (mediaMetadata.albumArtist != null)
                kd.put("albumArtist", mediaMetadata.albumArtist);

            fireEvent("metaData", kd);
        }
    }

    @Override
    public void onPlaybackStateChanged(int playbackState) {
        Player.Listener.super.onPlaybackStateChanged(playbackState);
        Log.i(LCAT, "State: " + playbackState);
        KrollDict kd = new KrollDict();
        if (playbackState == Player.STATE_BUFFERING) {
            kd.put("state", "buffering");
        } else if (playbackState == Player.STATE_IDLE) {
            kd.put("state", "idle");
        } else if (playbackState == Player.STATE_READY) {
            kd.put("state", "ready");
        } else if (playbackState == Player.STATE_ENDED) {
            kd.put("state", "ended");
        }
        fireEvent("playerState", kd);
    }

    @Override
    public void onEvents(Player player, Player.Events events) {
        Player.Listener.super.onEvents(player, events);
    }

    @Override
    public void onIsPlayingChanged(boolean isPlaying) {
        Player.Listener.super.onIsPlayingChanged(isPlaying);
        KrollDict kd = new KrollDict();
        kd.put("playing", isPlaying);
        fireEvent("playerState", kd);
    }

    @Override
    public void onPositionDiscontinuity(Player.PositionInfo oldPosition, Player.PositionInfo newPosition, int reason) {
        Player.Listener.super.onPositionDiscontinuity(oldPosition, newPosition, reason);
        KrollDict kd = new KrollDict();
        kd.put("oldPosition", oldPosition.positionMs);
        kd.put("position", newPosition.positionMs);
        fireEvent("seek", kd);
    }

    @Override
    public void processProperties(KrollDict d) {
        super.processProperties(d);
    }

    public void setMediaItem(String url){
        mediaUrl = url;
        if (player != null) {
            MediaItem mediaItem = MediaItem.fromUri(mediaUrl);
            player.setMediaItem(mediaItem);
            player.prepare();
        }
    }

    public void play() {
        player.play();
    }

    public void stop() {
        player.stop();
    }
}
